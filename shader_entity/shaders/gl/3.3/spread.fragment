#version 150 core
out vec4 fragmentColor;

in vec3 viewDirection;
in vec3 normal;
in vec3 gnormal;
in vec3 worldPosition;
in vec3 worldWater;
in vec3 barycentric;
in float colorFlag;

uniform vec4 palette[16];
uniform vec4 internalColor;
const vec4 highlightOverhangsColor = vec4(0.50, 0.26, 0.26, 1.0);
uniform float highlightOverhangsRadian;

/* 剖面图参数 */
uniform vec3 sectionNormal;
uniform vec3 sectionFrontPos;
uniform vec3 sectionBackPos;

const vec3 wireframeColor = vec3(0.1);
const vec3 clearColor = vec3(0.27);
uniform int renderModel;

bool frontFacing()
{
	vec3 fdx = dFdx(worldPosition);
	vec3 fdy = dFdy(worldPosition);
	return dot(gnormal, cross(fdx, fdy)) > 0.0;
} 

float brightness(vec4 color) {
    return color.r * 0.3 + color.g * 0.59 + color.b * 0.11;
}

void main( void )
{
	/* 剖面 */
	float distanceToFrontPlane = dot(sectionNormal, worldPosition - sectionFrontPos);
	float distanceToBackPlane = dot(sectionNormal, worldPosition - sectionBackPos);
	if (distanceToFrontPlane < 0.0 || distanceToBackPlane > 0.0) 
		discard;

	vec4 color;

	vec3 lightDir1 = normalize(vec3(0.75, -0.1, 1.0));
	vec3 lightDir2 = normalize(vec3(-0.75, -0.1, 0.0));
	float shininess = 10.0;
	float specular = 0.3;  
	float mixDiffuse = 1.12;
	float intensityAmbient = 0.25; 	
	if(!frontFacing())
	{
		lightDir1 = -lightDir1;
		specular = 0.33;  
		intensityAmbient = 0.4;
		color = internalColor;
	}
	else 
	{
		color = palette[int(round(colorFlag))];
		if (acos(dot(gnormal, vec3(0.0, 0.0, -1.0))) <= highlightOverhangsRadian)
		{
			color = mix(color, highlightOverhangsColor, 0.5);
		}
	}
	float bn = brightness(color);
	mixDiffuse -= mix(0.0, 0.23, bn);
	specular = mix(0.05, specular, (1 - bn)); 

	if (renderModel != 1) {
		vec3 baryDelta = fwidth(barycentric);
			
		vec3 edgeFactor = smoothstep(vec3(0.0), baryDelta * 1.0, barycentric);
		float minEdgeFactor = min(min(edgeFactor.x, edgeFactor.y), edgeFactor.z);

		if (renderModel == 2) {
			
			if (minEdgeFactor >= 1.0) {
                discard;
            }
            color.rgb = mix(wireframeColor, clearColor, minEdgeFactor);

		} else if (renderModel == 3) {
			color.rgb = mix(wireframeColor, color.rgb, minEdgeFactor);
		}
	}

	vec2 intensity = vec2(0.0, 0.0);	// x = diffuse, y = specular;

	vec3 posNormal = normalize(worldPosition);
	float specular_gain = max(dot(lightDir1, reflect(-lightDir1, normal)), 0.0);
	intensity.y = specular * pow(specular_gain, shininess);

	float NdotL = max(dot(normal, lightDir1) - 0.15, 0.15) * 0.84 + dot(normal, lightDir2) * 0.16;
	intensity.x = intensityAmbient + NdotL * mixDiffuse;

	fragmentColor = vec4(vec3(intensity.y) + (color.rgb * intensity.x), 1.0);

}
