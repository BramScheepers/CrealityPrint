#version 330 core

out vec4 fragmentColor;

in vec3 viewDirection;
in vec3 normal;
in vec3 gnormal;
in vec3 worldPosition;
in vec3 worldWater;
in vec3 barycentric;
in vec3 gcolor;

uniform int lightingEnable;
uniform float transparency;

uniform vec3 minSpace;
uniform vec3 maxSpace;
uniform float bottom; 
uniform float topVisibleHeight;
uniform float bottomVisibleHeight;
uniform float supportCos;

uniform int hoverState;
uniform int checkscope;

uniform int state;
uniform vec4 stateGain[4];
uniform vec4 outPlatformGain;
uniform vec4 insideGain;

uniform int nozzle;
uniform vec4 nozzleGain[16];

const vec3 wireframeColor = vec3(0.1);
const vec3 clearColor = vec3(0.27);
uniform int renderModel;

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
const float specularPower = 4.5;
const vec3 lightDirection = vec3(1.0, 0.0, 1.0);

float brightnessGain(vec4 color) {
    float bn = color.r * 0.3 + color.g * 0.59 + color.b * 0.11;
	return (1.1 - bn * 0.2);
}

vec4 directLight(vec3 light_dir, vec3 fnormal, vec4 core_color, vec4 ambient_color, vec4 diffuse_color, vec4 specular_color)
{
	/* 环境光 */
	ambient_color 	  	  = ambient_color * core_color;

	/* 镜面反射 */
	float shininess = 5.0;
	float specular_gain = max(dot(light_dir, reflect(-light_dir, fnormal)), 0.0);
	specular_color = specular_color * pow(specular_gain, shininess);

	/* 漫反射 */
	float NdotL 		  = max(dot(fnormal, light_dir), 0.2);
	diffuse_color		  = NdotL * diffuse_color * core_color;
	
	float bnGain = brightnessGain(core_color);
	return (ambient_color + diffuse_color + specular_color) * bnGain;
}

bool frontFacing()
{
    vec3 fdx = dFdx(worldPosition);
    vec3 fdy = dFdy(worldPosition);
    return dot(normalize(gnormal), normalize(cross(fdx, fdy))) > -0.05;
}

void main( void )
{
	if(checkscope > 0 && (worldPosition.z < bottomVisibleHeight || worldPosition.z > topVisibleHeight))
		discard;
	
	vec4 color = vec4(gcolor, 1.0);
	color = color * stateGain[state];

	vec3 fgnormal =	normalize(gnormal);
	
	if(checkscope > 0)
	{
		if(worldPosition.x < minSpace.x || worldPosition.y < minSpace.y || worldPosition.z < minSpace.z 
		|| worldPosition.x > maxSpace.x || worldPosition.y > maxSpace.y || worldPosition.z > maxSpace.z
		|| abs(worldPosition.z - bottom) < 0.05 )
		{
			color = color * outPlatformGain;
		}
	}
	
	if(hoverState > 0)
	{
		float v = dot(fgnormal, vec3(0.0, 0.0, -1.0));
		float k = step(supportCos, v);
		color.r += 0.8 * v * k;
	}
	
	if(!frontFacing())
	{
		color = color * insideGain;
	}
	color = color * nozzleGain[nozzle];

	if (renderModel != 1) {
		vec3 baryDelta = fwidth(barycentric);
			
		vec3 edgeFactor = smoothstep(vec3(0.0), baryDelta * 1.0, barycentric);
		float minEdgeFactor = min(min(edgeFactor.x, edgeFactor.y), edgeFactor.z);

		if (renderModel == 2) {
			
			if (minEdgeFactor >= 1.0) {
                discard;
            }
            color.rgb = mix(wireframeColor, clearColor, minEdgeFactor);

		} else if (renderModel == 3) {
			color.rgb = mix(wireframeColor, color.rgb, minEdgeFactor);
		}
	}

	if (lightingEnable > 0)
	{
		vec4 coreColor = vec4(color.rgb, 1.0);
		vec3 lightDir = normalize(lightDirection);
		float normalCos = dot(normal, lightDir);
		if (normalCos >= 0.0)
			coreColor = directLight(lightDir, normal, coreColor, ambient, diffuse, specular);
		else
			coreColor = directLight(-lightDir, normal, coreColor, ambient, diffuse, specular);

		fragmentColor = vec4(coreColor.rgb, transparency);
	}
	else 
	{
		fragmentColor = vec4(color.rgb, transparency);
	}
}
